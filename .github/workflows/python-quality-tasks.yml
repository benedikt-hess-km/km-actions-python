name: Run quality tasks for python projects
on:
  workflow_call:
    inputs:
      python-version:
        description: "The python version to use for executing the quality tasks."
        required: false
        type: string
        default: "3.8"
      python-package-path:
        description: "Path of the python package under quality test."
        required: true
        type: string
      unit-test-file-pattern:
        description: "The pattern to search for unit test files."
        required: false
        type: string
        default: "'test*.py'"

    secrets:
      aws-access-key-id:
        description: "The aws access key id used for login."
        required: true
      aws-secret-access-key:
        description: "The aws secret access key used for login."
        required: true
      aws-account-id:
        description: "The aws account id used for login."
        required: true
      role-external-id:
        description: "The external ID of the role to assume."
        required: true
      role-to-assume:
        description: "The role to assume."
        required: true
      aws-region:
        description: "AWS region of the codeartifact domain."
        required: true
      codeartifact-domain:
        description: "Domain of the aws codeartifact repository."
        required: true
      codeartifact-repository:
        description: "The aws codeartifact repository."
        required: true
      badge-uploader-api-key:
        description: "The api key for the badge uploader to use."
        required: false
      badge-uploader-api-url:
        description: "The url for the badge uploader to use."
        required: false
      ci-token:
        description: "The ci token to use."
        required: false
      sonar-token:
        description: "The token to use for sonarcloud."
        required: false

jobs:
  format:
    name: "Check Black Formatting"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: psf/black@stable

  test:
    name: "Test Python Package"
    runs-on: ubuntu-20.04
    needs: [format]
    steps:
      - uses: actions/checkout@v2

      - name: Determine if Sonarcloud is present
        id: use-sonarcloud
        run: |
          echo "::set-output name=use-sonarcloud::false"
          if [ ! -z ${{ secrets.sonar-token }} ]; then
            echo "Use sonarcloud"
            echo "::set-output name=use-sonarcloud::true"
          else
            echo "Do not use sonarcloud"
          fi;

      - name: "Setup Python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}

      - name: "Configure AWS Credentials"
        uses: kraussmaffei/actions/configure-aws-credentials@main
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          role-to-assume: ${{ secrets.role-to-assume }}
          role-external-id: ${{ secrets.role-external-id }}
          role-skip-session-tagging: true
          mask-aws-account-id: false
          aws-region: ${{ secrets.aws-region }}

      - name: "CodeArtifact login (pip)"
        uses: kraussmaffei/aws-tools-login@main
        with:
          account: ${{ secrets.aws-account-id }}
          region: ${{ secrets.aws-region }}
          aws-tool: "codeartifact-pip"
          codeartifact-domain: ${{ secrets.codeartifact-domain }}
          codeartifact-repository: ${{ secrets.codeartifact-repository }}

      - name: Install required tools
        shell: bash
        run: |
          pip install coverage flake8
          pip install .[test-dependencies]

      - name: Running flake8 linter...
        shell: bash
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 ./${{ inputs.python-package-path }} --count --select=E9,F63,F7,F82 --builtins="_" --show-source --statistics

          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 ./${{ inputs.python-package-path }} --count --exit-zero --max-complexity=10 --builtins="_" --max-line-length=127 --statistics

      - name: Running coverage calculation...
        id: coverage-calculator
        shell: bash
        run: |
          coverage run --source=${{ inputs.python-package-path }} -m unittest discover -s tests -p ${{ inputs.unit-test-file-pattern }}
          echo "::set-output name=total-coverage::$(coverage report -m | grep -o -E 'TOTAL.+ ([0-9]{1,3}%)' | grep -o -E '([0-9]{1,3}%)' | grep -o -E '([0-9]+)')"
          coverage xml -o ./coverage-reports/coverage.xml

      - name: SonarCloud Scan
        if: ${{ steps.use-sonarcloud.outputs.use-sonarcloud == 'true'}}
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.ci-token }}
          SONAR_TOKEN: ${{ secrets.sonar-token }}

      - name: "Push coverage"
        if: ${{ steps.use-sonarcloud.outputs.use-sonarcloud == 'false' }}
        id: git-badge-uploader
        uses: kraussmaffei/git-badge-uploader@main
        with:
          total-coverage: ${{ steps.coverage-calculator.outputs.total-coverage }}
          aws-api-key: ${{ secrets.badge-uploader-api-key }}
          aws-api-url: ${{ secrets.badge-uploader-api-url }}

      - name: "Coverage url"
        if: ${{ steps.use-sonarcloud.outputs.use-sonarcloud == 'false' }}
        shell: bash
        run: echo ${{ steps.git-badge-uploader.outputs.url }}